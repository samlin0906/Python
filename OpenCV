#縮小圖案

import cv2

img = cv2.imread("sample.jpg")
data = img.shape
print(data)
scale_percent = 50                                                                  #要放大縮小幾%
width = int(img.shape[1] * scale_percent / 100)                                     #縮放後圖片寬度
height = int(img.shape[0] * scale_percent / 100)                                    #縮放後圖片高度
dim = (width, height)                                                               #圖片形狀
print(dim)
resize_img = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)
cv2.imshow("resize", resize_img)
cv2.waitKey(0)


#鎖定特定顏色

import cv2
import numpy as np

image = cv2.imread('sample.jpg')
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
lower_green = np.array([156, 43, 46])
upper_green = np.array([180, 255, 255])
mask = cv2.inRange(hsv, lower_green, upper_green)
color = cv2.bitwise_and(image, image, mask=mask)
cv2.imshow("show", color)
cv2.waitKey(0)
cv2.destroyWindow("show")

#調整亮度跟飽和度

import cv2
import numpy as np

def main():

    img = cv2.imread("sample.jpg")
    fImg = img.astype(np.float32)                                     #把圖像變成(0, 1),且轉換為浮點
    fImg = fImg / 255
    hlsImg = cv2.cvtColor(fImg, cv2.COLOR_BGR2HLS)                    #BGR -> HLS
    hlsCopy = np.copy(hlsImg)
    
    lightness = 150                                                  
    saturation = 0
    
    hlsCopy[:, :, 1] = (1 + lightness / 100.0) * hlsCopy[:, :, 1]     # 亮度 調整為  "1 +/- 幾 %"
    hlsCopy[:, :, 1][hlsCopy[:, :, 1] > 1] = 1                        # 介於 0~1，超過1 = 1

    hlsCopy[:, :, 2] = (1 + saturation / 100.0) * hlsCopy[:, :, 2]    # 飽和度 調整為 "1 +/- 幾 %"
    hlsCopy[:, :, 2][hlsCopy[:, :, 2] > 1] = 1  

  
    result_img = cv2.cvtColor(hlsCopy, cv2.COLOR_HLS2BGR)
    result_img = ((result_img * 255).astype(np.uint8))                #需先乘255,以免unit8時被截斷
    cv2.imshow("output", result_img)
    cv2.waitKey(0)
    cv2.destroyWindow()

if __name__== "__main__":
    main()


#調整色調(冷色系/暖色系)、色溫(白平衡)

import cv2
import numpy as np

img = cv2.imread("cat_1.jpg")

imgB = img[:, :, 0]
imgG = img[:, :, 1]
imgR = img[:, :, 2]

# 白平衡,三個值變化相同
# 冷色調,除了b之外都增加
# 暖色調,除了r之外都增加
bAve = cv2.mean(imgB)[0]
gAve = cv2.mean(imgG)[0] + 40
rAve = cv2.mean(imgR)[0] + 40
aveGray = int(bAve + gAve + rAve) / 3

#增益係數
bCoef = aveGray / bAve
gCoef = aveGray / gAve
rCoef = aveGray / rAve
imgB = np.floor((imgB * bCoef))                    ## 向下取整數
imgG = np.floor((imgG * gCoef))
imgR = np.floor((imgR * rCoef))

imgb = imgB
imgb[imgb > 255] = 255

imgg = imgG
imgg[imgg > 255] = 255

imgr = imgR
imgr[imgr > 255] = 255

rgb = np.dstack((imgb, imgg, imgr)).astype(np.uint8)               #轉換成RGB

cv2.imshow("output", rgb)
# cv2.imwrite("Cool color_cat.jpg", rgb)
cv2.waitKey(0)
cv2.destroyWindow("output")
